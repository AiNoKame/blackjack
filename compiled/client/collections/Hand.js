// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Hand = (function(_super) {
    __extends(Hand, _super);

    function Hand() {
      _ref = Hand.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Hand.prototype.model = Card;

    /* START SOLUTION*/


    Hand.prototype.playable = true;

    /* END SOLUTION*/


    Hand.prototype.initialize = function(array, deck, isDealer) {
      this.deck = deck;
      this.isDealer = isDealer;
    };

    Hand.prototype.hit = function() {
      /* START SOLUTION*/

      var newCard;
      if (!this.playable) {
        return;
      }
      newCard = this.add(this.deck.pop()).last();
      if (this.busted()) {
        this.playable = false;
        this.trigger('hand:bust', this);
      }
      return newCard;
      /* ELSE
      @add(@deck.pop()).last()
      END SOLUTION
      */

    };

    /* START SOLUTION*/


    Hand.prototype.stand = function() {
      if (!this.playable) {
        return;
      }
      this.playable = false;
      return this.trigger('hand:stand', this);
    };

    Hand.prototype.playToWin = function() {
      if (!this.playable) {
        return;
      }
      this.first().flip();
      while (this.scores()[0] < 17) {
        this.hit();
      }
      if (!this.busted()) {
        return this.stand();
      }
    };

    Hand.prototype.busted = function() {
      return this.maxScore() > 21;
    };

    /* END SOLUTION*/


    Hand.prototype.scores = function() {
      var hasAce, score;
      hasAce = this.reduce(function(memo, card) {
        return memo || card.get('value') === 1;
      }, false);
      score = this.reduce(function(score, card) {
        return score + (card.get('revealed') ? card.get('value') : 0);
      }, 0);
      if (hasAce) {
        return [score, score + 10];
      } else {
        return [score];
      }
    };

    /* START SOLUTION*/


    Hand.prototype.maxScore = function() {
      var scores;
      scores = this.scores();
      if (scores.length > 1) {
        if (scores[1] <= 21) {
          return scores[1];
        } else {
          return scores[0];
        }
      } else {
        return scores[0];
      }
    };

    /* END SOLUTION*/


    return Hand;

  })(Backbone.Collection);

}).call(this);
