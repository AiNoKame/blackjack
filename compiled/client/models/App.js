// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      _ref = App.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      /* START SOLUTION*/

      this.get('playerHand').on('all', this.playerEvents, this);
      return this.get('dealerHand').on('all', this.dealerEvents, this);
      /* END SOLUTION*/

    };

    /* START SOLUTION*/


    App.prototype.playerEvents = function(event, hand) {
      switch (event) {
        case 'hand:bust':
          return this.trigger('win:dealer');
        case 'hand:stand':
          return this.get('dealerHand').playToWin();
      }
    };

    App.prototype.dealerEvents = function(event, hand) {
      switch (event) {
        case 'hand:bust':
          return this.trigger('win:player');
        case 'hand:stand':
          return this.findWinner();
      }
    };

    App.prototype.findWinner = function() {
      if (this.get('playerHand').maxScore() > this.get('dealerHand').maxScore()) {
        return this.trigger('win:player');
      } else if (this.get('playerHand').maxScore() < this.get('dealerHand').maxScore()) {
        return this.trigger('win:dealer');
      } else {
        return this.trigger('push');
      }
    };

    /* END SOLUTION*/


    return App;

  })(Backbone.Model);

}).call(this);
